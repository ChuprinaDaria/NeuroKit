import sqlite3
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import DB_PATH

router = Router()
logger = logging.getLogger(__name__)


# === FSM –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è username
class SupportStates(StatesGroup):
    waiting_for_username = State()


# üîÅ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ñ—Ä–∞–∑–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
def get_random_supportive_phrase():
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        cursor.execute('SELECT COUNT(*) FROM supportive_phrases_unique')
        count = cursor.fetchone()[0]

        if count == 0:
            logger.info("üì• –î–æ–¥–∞—î–º–æ —Ñ—Ä–∞–∑–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤ –±–∞–∑—É")
            phrases = [
                ("phrase1", "–¢–∏ —Å–∏–ª—å–Ω—ñ—à–∏–π, –Ω—ñ–∂ –¥—É–º–∞—î—à! üê±"),
                ("phrase2", "–ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî —Ü–µ –Ω–æ–≤–∏–π —à–∞–Ω—Å! üê±"),
                ("phrase3", "–¢–∏ —á—É–¥–æ–≤–æ —Å–ø—Ä–∞–≤–ª—è—î—à—Å—è! üê±"),
                ("phrase4", "–ü–∞–º'—è—Ç–∞–π, —Ç–∏ –Ω–µ –æ–¥–∏–Ω! üê±"),
                ("phrase5", "–¢–≤–æ—ó –ø–æ—á—É—Ç—Ç—è –≤–∞–∂–ª–∏–≤—ñ —ñ –¥—ñ–π—Å–Ω—ñ! üê±"),
                ("phrase6", "–ú–∞–ª–µ–Ω—å–∫—ñ –∫—Ä–æ–∫–∏ –≤–µ–¥—É—Ç—å –¥–æ –≤–µ–ª–∏–∫–∏—Ö –∑–º—ñ–Ω! üê±"),
                ("phrase7", "–ë—É—Ç–∏ –ª—é–¥–∏–Ω–æ—é ‚Äî –æ–∑–Ω–∞—á–∞—î –º–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –µ–º–æ—Ü—ñ—ó, —ñ —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. üê±"),
                ("phrase8", "–¢–∏ –º–æ–∂–µ—à –≤–ø–æ—Ä–∞—Ç–∏—Å—è –∑ —Ü–∏–º –¥–Ω–µ–º! üê±"),
                ("phrase9", "–î–æ–∑–≤–æ–ª—å —Å–æ–±—ñ –≤—ñ–¥–ø–æ—á–∏—Ç–∏, –∫–æ–ª–∏ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ. üê±"),
                ("phrase10", "–¢–∏ –∑–∞—Å–ª—É–≥–æ–≤—É—î—à –Ω–∞ —Ç—É—Ä–±–æ—Ç—É —ñ –ª—é–±–æ–≤. üê±")
            ]
            cursor.executemany(
                'INSERT OR IGNORE INTO supportive_phrases_unique (phrase_id, text) VALUES (?, ?)',
                phrases
            )
            conn.commit()

        cursor.execute('SELECT text FROM supportive_phrases_unique ORDER BY RANDOM() LIMIT 1')
        result = cursor.fetchone()
        conn.close()

        return result[0] if result else "–¢–∏ –º–æ–ª–æ–¥–µ—Ü—å! –í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ üê±"
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—Ä–∞–∑–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {e}")
        return "–¢–∏ –º–æ–ª–æ–¥–µ—Ü—å! –í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ üê±"


# === –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§—Ä–∞–∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"
@router.message(F.text == "üóØ –§—Ä–∞–∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")
async def supportive_phrase_handler(message: Message):
    phrase = get_random_supportive_phrase()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –Ü–Ω—à–∞ —Ñ—Ä–∞–∑–∞", callback_data="another_phrase")],
        [InlineKeyboardButton(text="ü§ù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥—Ä—É–≥—É", callback_data="send_phrase")]
    ])

    await message.answer(
        f"üê± –û—Å—å —Ñ—Ä–∞–∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±–µ:\n\n{phrase}",
        reply_markup=keyboard
    )


# === –Ü–Ω—à–∞ —Ñ—Ä–∞–∑–∞ (callback)
@router.callback_query(F.data == "another_phrase")
async def another_phrase_handler(callback: CallbackQuery):
    phrase = get_random_supportive_phrase()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –Ü–Ω—à–∞ —Ñ—Ä–∞–∑–∞", callback_data="another_phrase")],
        [InlineKeyboardButton(text="ü§ù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥—Ä—É–≥—É", callback_data="send_phrase")]
    ])

    await callback.message.edit_text(
        f"üê± –û—Å—å —â–µ –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–ª—è —Ç–µ–±–µ:\n\n{phrase}",
        reply_markup=keyboard
    )
    await callback.answer()


# === –ö–Ω–æ–ø–∫–∞ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥—Ä—É–≥—É"
@router.callback_query(F.data == "send_phrase")
async def request_username(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üê± –í–≤–µ–¥—ñ—Ç—å @username –¥—Ä—É–≥–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—Ä–∞–∑—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ:")
    await state.set_state(SupportStates.waiting_for_username)
    await callback.answer()


# === –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è @username
@router.message(F.text.startswith("@"))
async def process_username(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != SupportStates.waiting_for_username.state:
        return

    username = message.text.strip().replace("@", "")
    phrase = get_random_supportive_phrase()

    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT telegram_id FROM users WHERE username = ?', (username,))
        recipient = cursor.fetchone()
        conn.close()

        if recipient:
            await message.bot.send_message(
                chat_id=recipient[0],
                text=f"üê± –•—Ç–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–æ–±—ñ –∫–æ—Ç–∏–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{phrase}\n\n–í—ñ–Ω –¥—É–∂–µ —Ö–æ—á–µ, —â–æ–± —Ç–∏ –ø–æ—Å–º—ñ—Ö–Ω—É–≤—Å—è(-–ª–∞—Å—å) —Å—å–æ–≥–æ–¥–Ω—ñ!"
            )
            await message.answer(f"üê± –§—Ä–∞–∑—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ @{username}!")
        else:
            await message.answer(f"üê± –ù–∞ –∂–∞–ª—å, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω —â–µ –Ω–µ –≤–∑–∞—î–º–æ–¥—ñ—è–≤ –∑ –±–æ—Ç–æ–º.")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ—Ä–∞–∑–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {e}")
        await message.answer("üê± –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    await state.clear()


# === –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞
def register_supportive_handlers(dp):
    dp.include_router(router)
