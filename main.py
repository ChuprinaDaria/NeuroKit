import logging
import asyncio
import os
import sqlite3
import traceback

from aiogram import Bot, Dispatcher, Router
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommandScopeDefault, ErrorEvent
from aiogram.filters import Command 

from config import BOT_TOKEN, DB_PATH
from handlers import register_all_handlers
from inline_queries import handle_inline_query  # —ñ–Ω–ª–∞–π–Ω-–ø–æ—à—É–∫
from db.tests import update_image_filenames_from_folder
from handlers.about import register_about_handlers


# ====== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ ======
def init_db():
    try:
        logging.info(f"üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {DB_PATH}")
        if not os.path.exists(DB_PATH):
            logging.warning(f"‚ùå –ë–î –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {DB_PATH}")
            return False

        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            logging.info(f"üì¶ –¢–∞–±–ª–∏—Ü—ñ: {[x[0] for x in cursor.fetchall()]}")
        return True
    except Exception:
        logging.exception("üí• –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î")
        return False


# ====== –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ ======
async def error_handler(event: ErrorEvent):
    try:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {event.exception}")
        logging.error(f"‚ùå –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")

        if event.update and event.update.message:
            try:
                await event.update.message.reply(
                    "üê± –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            except Exception as e:
                logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")
        elif event.update and event.update.callback_query:
            try:
                await event.update.callback_query.message.reply(
                    "üê± –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            except Exception as e:
                logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")


def register_inline_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º—É"""
    router = Router()
    router.inline_query.register(handle_inline_query)
    dp.include_router(router)


# ====== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ======
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s"
    )

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
    if not init_db():
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ë–î. –ë–æ—Ç –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.")
    else:
        from db.tests import update_image_filenames_from_folder
        update_image_filenames_from_folder()


    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —ñ–∑ –Ω–æ–≤–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –¥–ª—è parse_mode
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=MemoryStorage())

    # ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    register_all_handlers(dp)

    # ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω–ª–∞–π–Ω-—Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    register_inline_handlers(dp)

    # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    dp.errors.register(error_handler)

    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    try:
        from aiogram.types import BotCommand

        commands = [
            BotCommand(command="start", description="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            BotCommand(command="feedback", description="üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫"),
            BotCommand(command="help", description="‚ùì –î–æ–ø–æ–º–æ–≥–∞"),
            
        ]
        await bot.set_my_commands(commands, scope=BotCommandScopeDefault())
        logging.info("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞: {e}")

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")

    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await bot.session.close()
        logging.info("üîö –°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        traceback.print_exc()
