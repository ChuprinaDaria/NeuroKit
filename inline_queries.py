# handlers/inline_mode.py

import uuid
import sqlite3
import logging
from aiogram import types
from aiogram.types import (
    InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton
)

from config import DB_PATH
from db.phrases import get_random_supportive_phrase

logger = logging.getLogger(__name__)

async def handle_inline_query(inline_query: types.InlineQuery):
    try:
        query = inline_query.query.lower()
        results = []

        if query:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()

            cursor.execute('''
                SELECT test_code, name, use_case FROM test_descriptions_cleaned
                WHERE lower(name) LIKE ? OR lower(use_case) LIKE ?
            ''', (f"%{query}%", f"%{query}%"))
            matching_tests = cursor.fetchall()
            conn.close()

            for test_code, name, use_case in matching_tests:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–ü—Ä–æ–π—Ç–∏ –≤ –±–æ—Ç—ñ", 
                        url=f"https://t.me/Neyrovidminni_kotyki_bot?start=test_{test_code}"
                    )]
                ])
                
                results.append(
                    InlineQueryResultArticle(
                        id=str(uuid.uuid4()),
                        title=name,
                        description=use_case[:100],
                        input_message_content=InputTextMessageContent(
                            message_text=f"*{name}*\n\n{use_case}\n\n–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç —ñ –¥—ñ–∑–Ω–∞–π—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–µ–±–µ!",
                            parse_mode="Markdown"
                        ),
                        reply_markup=keyboard
                    )
                )

        # –Ø–∫—â–æ –ø—É—Å—Ç–æ –∞–±–æ "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
        if not query or "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞" in query:
            phrase = get_random_supportive_phrase()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
            support_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –±–æ—Ç", 
                    url="https://t.me/Neyrovidminni_kotyki_bot"
                )]
            ])
            
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–ö–æ—Ç–∏–∫ –æ–±—ñ–π–º–∞—à–∫–∞",
                    description="–¢—É—Ç, —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏",
                    input_message_content=InputTextMessageContent(
                        message_text=f"üê± *–ö–æ—Ç–∏–∫ –æ–±—ñ–π–º–∞—à–∫–∞*\n\n{phrase}\n\n_–í—ñ–¥ @Neyrovidminni_kotyki_bot_",
                        parse_mode="Markdown"
                    ),
                    reply_markup=support_keyboard
                )
            )

        await inline_query.answer(results)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —ñ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Ç—É: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ —Ä–æ—É—Ç–µ—Ä—ñ:
# router.inline_query.register(handle_inline_query)