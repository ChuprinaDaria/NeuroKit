# start_phone_main.py
import logging
from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db.users import is_user_registered, add_user
from config import ADMIN_IDS
from handlers.menu import show_main_menu

logger = logging.getLogger(__name__)
router = Router()

# === –°—Ç–∞–Ω –¥–ª—è FSM ===
class RegistrationStates(StatesGroup):
    waiting_for_phone = State()


# === /start ===
@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id

        if is_user_registered(user_id):
            return await show_main_menu(message, state)
        else:
            keyboard = [
                [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

            await message.answer(
                "üê± –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –∫–æ—Ç–∏–∫-–ø–æ–º—ñ—á–Ω–∏–∫. –ü–æ–¥—ñ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó üêæ",
                reply_markup=reply_markup
            )
            await state.set_state(RegistrationStates.waiting_for_phone)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ start_handler: {e}")
        await message.answer("üêæ –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–ø–∏—à–∏ /start —â–µ —Ä–∞–∑.")


# === –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É ===
@router.message(F.contact)
async def process_phone(message: Message, state: FSMContext):
    try:
        contact = message.contact
        if not contact:
            await message.answer("üêæ –ù–æ–º–µ—Ä –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ /start")
            return

        user = message.from_user
        phone = contact.phone_number
        logger.info(f"üì≤ –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: {phone} –≤—ñ–¥ {user.id}")

        add_user(user.id, phone, user.username, user.first_name, user.last_name)

        for admin_id in ADMIN_IDS:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=f"üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (@{user.username})"
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ {admin_id}: {e}")

        await message.answer(
            "‚úÖ –î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –í—ñ–¥–∫—Ä–∏–≤–∞—é –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_main_menu(message, state)
    except Exception as e:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ process_phone")
        await message.answer("üê± –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ù–∞–ø–∏—à—ñ—Ç—å /start —â–µ —Ä–∞–∑ üôè")
