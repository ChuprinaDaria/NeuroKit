from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import os
from dotenv import load_dotenv
from config import ADMIN_IDS

load_dotenv()
router = Router()
logger = logging.getLogger(__name__)

# üë§ ID –∞–¥–º—ñ–Ω–∞
ADMIN_ID = ADMIN_IDS[0] 

class FeedbackStates(StatesGroup):
    waiting_feedback = State()

@router.message(F.text == "/feedback")
async def ask_for_feedback(message: Message, state: FSMContext):
    await state.set_state(FeedbackStates.waiting_feedback)
    await message.answer("‚úç –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è. –í—ñ–Ω –±—É–¥–µ –∞–Ω–æ–Ω—ñ–º–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –∞–¥–º—ñ–Ω—É.")

@router.message(FeedbackStates.waiting_feedback)
async def receive_feedback(message: Message, state: FSMContext):
    feedback = message.text.strip()

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    try:
        text = (
            "üì© *–ù–æ–≤–∏–π –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*\n\n"
            f"{feedback}"
        )
        await message.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="Markdown")
        await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–≤—ñ–π –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ üíå")
    except Exception as e:
        logger.exception("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ –∞–¥–º—ñ–Ω—É")
        await message.answer("‚ùå –£–ø—Å! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...")

    await state.clear()
