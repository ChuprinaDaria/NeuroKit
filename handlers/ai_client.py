from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.users import can_use_ai_today, update_ai_usage
from db.tests import process_test_result
from openai import OpenAI
import logging
from aiogram import Router
from aiogram import F
# ‚¨á –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ:
router = Router()

logger = logging.getLogger(__name__)
client = OpenAI()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π –∑—ñ —Å–≤–æ—ó–º –∫–ª—é—á–µ–º –∞–±–æ –∑ config

class AIConsultStates(StatesGroup):
    waiting_question = State()

async def ask_ai_entry(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    user_id = callback.from_user.id
    can_consult, _ = can_use_ai_today(user_id)

    if not can_consult:
        await callback.message.reply("ü§ñ –¢–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤(-–ª–∞) 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –ü–æ–≤–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞ üê±")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ FSM
    data = await state.get_data()
    required_keys = ["test_code", "test_name", "scores", "sections"]
    if not all(k in data for k in required_keys):
        await callback.message.reply("üòø –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó. –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç.")
        return

    test_code = data["test_code"]
    test_name = data["test_name"]
    scores = data["scores"]
    sections = data.get("sections", [])

    result = process_test_result(test_code, scores, sections)
    result_text = ""
    for section, score, interpretation in result:
        score = round(score, 1)
        if section:
            result_text += f"{section.capitalize()}: {score} –±–∞–ª—ñ–≤\n"
        else:
            result_text += f"–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª: {score} –±–∞–ª—ñ–≤\n"
        result_text += f"{interpretation.strip()}\n\n"

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
    await state.update_data(
        ai_consult_mode=True,
        ai_auto_prompt=(
            f"–Ø –ø—Ä–æ–π—à–æ–≤(-–ª–∞) —Ç–µ—Å—Ç {test_name}. –ú—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{result_text.strip()}\n"
            f"–ü–æ—è—Å–Ω–∏, —â–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î —ñ —è–∫ —è –º–æ–∂—É –ø–æ–¥–±–∞—Ç–∏ –ø—Ä–æ —Å–µ–±–µ."
        )
    )

    await callback.message.reply(
        f"üìä –¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ—Å—Ç—É *{test_name}*:\n\n{result_text.strip()}\n"
        f"üîé –ó–∞—Ä–∞–∑ –ø–æ—è—Å–Ω—é, —â–æ —Ü–µ –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏...",
        parse_mode="Markdown"
    )

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
    await process_ai_question_auto(callback.message, state)
    update_ai_usage(user_id, consultations_added=1)

async def process_ai_question_auto(message: types.Message, state: FSMContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É"""
    data = await state.get_data()
    
    if not data.get("ai_consult_mode"):
        return

    user_id = message.from_user.id
    chat_id = message.chat.id

    test_code = data.get("test_code", "")
    test_name = data.get("test_name", "—Ç–µ—Å—Ç")
    scores = data.get("scores", [])
    sections = data.get("sections", [])

    result = process_test_result(test_code, scores, sections)
    result_text = ""
    for section, score, interpretation in result:
        if section:
            result_text += f"{section.capitalize()}: {score} –±–∞–ª—ñ–≤\n"
        else:
            result_text += f"–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª: {score}\n"
        result_text += f"{interpretation.strip()}\n\n"

    user_text = (
        f"–Ø —â–æ–π–Ω–æ –ø—Ä–æ–π—à–æ–≤(-–ª–∞) —Ç–µ—Å—Ç {test_name}.\n"
        f"–û—Å—å –º—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{result_text.strip()}\n"
        f"–ü–æ—è—Å–Ω–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ —Ü–µ –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏ —ñ —è–∫ –∫—Ä–∞—â–µ –ø–æ–¥–±–∞—Ç–∏ –ø—Ä–æ —Å–µ–±–µ."
    )

    await _process_ai_request(message.bot, chat_id, user_id, user_text, state)

async def process_ai_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    data = await state.get_data()
    
    if not data.get("ai_consult_mode"):
        await message.reply("ü§ñ –ü—Ä–∏–≤—ñ—Ç, —è –∫–æ—Ç–∏–∫ –®–Ü –°–µ–º–µ–Ω üêæ –ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text.strip()

    await _process_ai_request(message.bot, chat_id, user_id, user_text, state)

async def _process_ai_request(bot, chat_id: int, user_id: int, user_text: str, state: FSMContext):
    """–í–Ω—É—Ç—Ä—ñ—à–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ AI –∑–∞–ø–∏—Ç—É"""
    _, questions_asked = can_use_ai_today(user_id)
    questions_asked = questions_asked or 0
    
    if questions_asked >= 10:
        await bot.send_message(chat_id=chat_id, text="ü§ñ –¢–≤—ñ–π –ª—ñ–º—ñ—Ç —É 10 –ø–∏—Ç–∞–Ω—å –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ üê±")
        return

    update_ai_usage(user_id, questions_added=1)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç–∞–Ω—å –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(ai_questions=questions_asked + 1)

    wait_msg = await bot.send_message(chat_id=chat_id, text="üí¨ –î—É–º–∞—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é...")

    try:
        logger.info("üß† –ó–∞–ø–∏—Ç –¥–æ OpenAI...")
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": (
                    "–¢–∏ –µ–º–ø–∞—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ—é –æ—Å–≤—ñ—Ç–æ—é. "
                    "–ù–µ —Å—Ç–∞–≤–∏—à –¥—ñ–∞–≥–Ω–æ–∑—ñ–≤. –ü–æ—è—Å–Ω—é—î—à –∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, "
                    "–ø—Ä–æ–ø–æ–Ω—É—î—à –∫–æ—Ä–∏—Å–Ω—ñ —ñ–¥–µ—ó, –ø—ñ–¥—Ç—Ä–∏–º—É—î—à. –Ø–∫—â–æ —â–æ—Å—å –º–æ–∂–µ –±—É—Ç–∏ —Å–µ—Ä–π–æ–∑–Ω–∏–º ‚Äî "
                    "—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—à –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Ñ–∞—Ö—ñ–≤—Ü—è. –ü–∏—à–µ—à –º º—è–∫–æ —ñ —Ç—É—Ä–±–æ—Ç–ª–∏–≤–æ, –±–µ–∑ –æ—Ü—ñ–Ω–æ–∫. "
                    "–ó–≤–µ—Ä—Ç–∞–π—Å—è –Ω–∞ —Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç—ñ–ª—å–∫–∏ –¥–∞–Ω–Ω—ñ –∑ —Ç–µ—Å—Ç—ñ–≤ —è–∫—ñ –ø—Ä–æ–π—à–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —à—É–∫–∞–π —Å—Ç–æ—Ä–æ–Ω–Ω—ñ"
                )},
                {"role": "user", "content": user_text}
            ],
            temperature=0.7,
            max_tokens=500
        )
        reply = response.choices[0].message.content

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=wait_msg.message_id,
            text=f"ü§ñ {reply}"
        )

    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI")
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=wait_msg.message_id,
                text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ OpenAI. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ üôà"
            )
        except:
            await bot.send_message(chat_id=chat_id, text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ OpenAI.")

router.callback_query.register(ask_ai_entry, F.data == "ask_ai")
router.message.register(process_ai_question, AIConsultStates.waiting_question)