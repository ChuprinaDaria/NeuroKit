import asyncio
import sqlite3
import traceback
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
import os

from config import ADMIN_IDS
from .constants import States, FSMStates
from db.tests import get_test_info
from config import DB_PATH

import logging
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π
admin_router = Router()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
def log_admin_message(message):
    try:
        sent_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO admin_messages_log (message, sent_at) VALUES (?, ?)', (message, sent_at))
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞: {e}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
async def broadcast_message(bot: Bot, message: str):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT telegram_id FROM users')
            users = cursor.fetchall()

        success_count = 0
        failed_count = 0
        logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

        for user in users:
            chat_id = user[0]
            print(f"üîÅ –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}")

            try:
                await bot.send_message(chat_id=chat_id, text=message)
                success_count += 1
                # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                await asyncio.sleep(0.1)
            except Exception as e:
                failed_count += 1
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

        logger.info(f"–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø—ñ—à–Ω–æ: {success_count}, –ü–æ–º–∏–ª–æ–∫: {failed_count}")
        return success_count, failed_count
    except Exception as e:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        logger.error(traceback.format_exc())
        return 0, 0

# –§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω-–ø—Ä–∞–≤
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
@admin_router.message(Command("admin"))
@admin_router.message(F.text == "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            await message.reply("üê± –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return

        # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        await state.clear()

        keyboard = [
            [KeyboardButton(text="üì¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

        await message.answer(
            "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=reply_markup
        )

        await state.set_state(FSMStates.TEST_MENU)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ: {e}")

# –ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏
@admin_router.message(F.text == "üì¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
async def start_broadcast(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            await message.reply("üê± –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return

        keyboard = [
            [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

        await message.answer(
            "üì¢ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
            reply_markup=reply_markup
        )

        await state.set_state(FSMStates.ADMIN_MESSAGE)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
@admin_router.message(StateFilter(FSMStates.ADMIN_MESSAGE))
async def process_broadcast_message(message: Message, state: FSMContext):
    bot = message.bot 
    try:
        if not is_admin(message.from_user.id):
            await message.reply("üê± –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return

        message_text = message.text
        
        # –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        log_admin_message(message_text)

        wait_message = await message.answer(
            "üïí –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å..."
        )

        # –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
        success_count, failed_count = await broadcast_message(bot, message_text)

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"‚úÖ –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        result_text += f"üì§ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {success_count}\n"
        if failed_count > 0:
            result_text += f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_count}"

        await wait_message.edit_text(result_text)

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        await admin_panel(message, state)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        logger.error(traceback.format_exc())
        try:
            await message.answer("‚ùå –ü—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            await admin_panel(message, state)
        except:
            pass

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
@admin_router.message(StateFilter(FSMStates.ADMIN_MESSAGE), F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_broadcast(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            await message.reply("üê± –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return

        await message.answer("‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await admin_panel(message, state)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            await message.reply("üê± –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return

        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()

            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]

            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
            cursor.execute("SELECT SUM(tests_completed) FROM users")
            total_tests = cursor.fetchone()[0] or 0

            # –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ —Ç–µ—Å—Ç–∏
            cursor.execute("""
                SELECT last_test, COUNT(*) as count
                FROM users
                WHERE last_test IS NOT NULL
                GROUP BY last_test
                ORDER BY count DESC
                LIMIT 5
            """)
            popular_tests = cursor.fetchall()

            # –ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –¥–µ–Ω—å
            cursor.execute("""
                SELECT COUNT(*) FROM users
                WHERE date_joined >= datetime('now', '-1 day')
            """)
            new_users_day = cursor.fetchone()[0]

            # –ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            cursor.execute("""
                SELECT COUNT(*) FROM users
                WHERE date_joined >= datetime('now', '-7 day')
            """)
            new_users_week = cursor.fetchone()[0]

            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –¥–æ –®–Ü
            cursor.execute("SELECT SUM(questions_asked) FROM ai_usage")
            total_questions = cursor.fetchone()[0] or 0

            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
            cursor.execute("SELECT SUM(consultations_used) FROM ai_usage")
            total_consults = cursor.fetchone()[0] or 0

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            f"üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"üìù –í—Å—å–æ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: {total_tests}\n"
            f"üÜï –ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –¥–µ–Ω—å: {new_users_day}\n"
            f"üÜï –ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {new_users_week}\n\n"
            f"ü§ñ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –®–Ü:*\n"
            f"- –ü–∏—Ç–∞–Ω—å –¥–æ –®–Ü: {total_questions}\n"
            f"- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π: {total_consults}\n\n"
        )

        if popular_tests:
            stats_text += "üîù *–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ —Ç–µ—Å—Ç–∏:*\n"
            for test_code, count in popular_tests:
                test_name, *_ = get_test_info(test_code) or (test_code, )
                stats_text += f"- {test_name}: {count} —Ä–∞–∑—ñ–≤\n"

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(traceback.format_exc())
        await message.answer(
            "‚ùå –ü—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
        )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
@admin_router.message(F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            await message.reply("üê± –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return

        await message.answer(
            "üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await state.set_state(FSMStates.START)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ—É—Ç–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—ñ
def setup_admin_router(dp):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–¥–º—ñ–Ω-—Ä–æ—É—Ç–µ—Ä–∞ –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    dp.include_router(admin_router)

router = admin_router