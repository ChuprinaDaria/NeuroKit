from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
import logging
from aiogram.filters import Command
from aiogram import F  # ‚Üê –æ—Ü–µ —ñ —î F
from aiogram.fsm.context import FSMContext



logger = logging.getLogger(__name__)
router = Router()

# üìå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (persistent)
MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"), KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")],
        [KeyboardButton(text="üóØ –§—Ä–∞–∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"), KeyboardButton(text="ü§ù –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∑ –¥—Ä—É–≥–æ–º")],
        [KeyboardButton(text="üêæ –ü—Ä–æ –ø—Ä–æ—î–∫—Ç"), KeyboardButton(text="üí∏ –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏")],
        [KeyboardButton(text="ü§ñ –®–Ü –∫—ñ—Ç –ù–µ–π—Ä–æ–Ω")]
    ],
    resize_keyboard=True,
    is_persistent=True,
    input_field_placeholder="–û–±–µ—Ä–∏ –¥—ñ—é"
)

@router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_from_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üõë –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –¢–∏ –∑–Ω–æ–≤—É –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=MAIN_MENU_KEYBOARD)


# üìã –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ ‚Äî –¥–ª—è Message —ñ CallbackQuery)
async def show_main_menu(event, *_):
    try:
        if isinstance(event, CallbackQuery):
            await event.answer()
            await event.message.answer("üê± –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=MAIN_MENU_KEYBOARD)

        elif isinstance(event, Message):
            await event.answer("üê± –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=MAIN_MENU_KEYBOARD)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

        try:
            text = "üêæ –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–ø–∏—à–∏ /start, —â–æ–± –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ–Ω—é."
            if isinstance(event, CallbackQuery):
                await event.message.answer(text)
            elif isinstance(event, Message):
                await event.answer(text)
        except Exception as inner_error:
            logger.error(f"üí• –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ fallback-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {inner_error}")
