from aiogram import Bot, types, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.filters.callback_data import CallbackData

from db.tests import get_test_info, get_test_questions
from db.users import update_user_stats
from db.tests import process_test_result
from db.phrases import get_random_supportive_phrase
from handlers.menu import show_main_menu
import logging
import sqlite3
import os
import traceback
from config import DB_PATH
import re
from aiogram.types import FSInputFile
from aiogram import F



# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)

# –ü—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ DB_PATH –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö
# from .constants import DB_PATH


def escape_md_v2(text: str) -> str:
    """
    Escape all MarkdownV2 special characters according to Telegram rules
    """
    if not text:
        return ""
    
    # Telegram MarkdownV2 —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!\\])', r'\\\1', text)

def bold_v2(text: str) -> str:
    return f"*{escape_md_v2(text)}*"

def italic_v2(text: str) -> str:
    return f"_{escape_md_v2(text)}_"



def escape_md(text: str) -> str:
    """
    –ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ Markdown
    """
    if not text:
        return ""
    
    # –°–∏–º–≤–æ–ª–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É Markdown
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!\\])', r'\\\1', text)


def escape_md_v2_regex(text: str) -> str:
    """
    –ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è MarkdownV2 –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏
    """
    if not text:
        return ""
    
    # –°–∏–º–≤–æ–ª–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –≤ MarkdownV2
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!\\])', r'\\\1', text)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –∂–∏—Ä–Ω–∏–º —à—Ä–∏—Ñ—Ç–æ–º
def format_bold_safe(text: str) -> str:
    """
    –ë–µ–∑–ø–µ—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω–∏–º —à—Ä–∏—Ñ—Ç–æ–º, –µ–∫—Ä–∞–Ω—É–≤–∞–≤—à–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    """
    if not text:
        return ""
    return f"*{escape_md_v2(text)}*"


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫—É—Ä—Å–∏–≤–æ–º
def format_italic_safe(text: str) -> str:
    """
    –ë–µ–∑–ø–µ—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º, –µ–∫—Ä–∞–Ω—É–≤–∞–≤—à–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    """
    if not text:
        return ""
    return f"_{escape_md_v2(text)}_"



class TestStates(StatesGroup):
    test_menu = State()
    test_in_progress = State()

# Callback data —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è —Ç–∏–ø—ñ–∑–∞—Ü—ñ—ó
class TestCallbackData(CallbackData, prefix="test"):
    action: str
    test_code: str = ""

class AnswerCallbackData(CallbackData, prefix="answer"):
    question_idx: int
    score: float
    section: str = ""


@router.message(F.text == "üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def show_test_menu_from_button(message: Message, state: FSMContext):
    await state.clear()  # –©–æ–± –æ–±–Ω—É–ª–∏—Ç–∏ –±—É–¥—å-—è–∫–∏–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
    await show_test_list(message, state)

@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await show_main_menu(callback, state)




@router.callback_query(lambda c: c.data.startswith("test_"))
async def test_info_handler(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ—Å—Ç"""
    await test_info(callback, state)

@router.callback_query(lambda c: c.data == "back_to_tests")
async def back_to_tests_handler(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤"""
    await back_to_tests(callback, state)

@router.callback_query(lambda c: c.data.startswith("start_test_"))
async def start_test_handler(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É"""
    await start_test(callback, state)

@router.callback_query(lambda c: c.data.startswith("answer_"), StateFilter(TestStates.test_in_progress))
async def process_answer_handler(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è"""
    await process_answer(callback, state)

@router.callback_query(lambda c: c.data == "share_test_text")
async def share_test_text_handler(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ç–µ—Å—Ç—É"""
    await share_test_text(callback, state)

@router.callback_query(lambda c: c.data == "copy_share_text")
async def copy_share_text_handler(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ—à–∏—Ä–µ–Ω–Ω—è"""
    await copy_share_text(callback, state)

@router.callback_query(lambda c: c.data == "back_to_results")
async def back_to_results_handler(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
    await back_to_results(callback, state)

# –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–±–µ–∑ –∑–º—ñ–Ω –≤ –ª–æ–≥—ñ—Ü—ñ)
async def show_test_list(message: Message, state: FSMContext):
    try:
        # –ü—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ DB_PATH –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ –∞–±–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π


        
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        logger.info(f"–¢–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö: {[table[0] for table in tables]}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ test_descriptions_cleaned
        try:
            cursor.execute("PRAGMA table_info(test_descriptions_cleaned)")
            columns = cursor.fetchall()
            logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ test_descriptions_cleaned: {columns}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
        cursor.execute('SELECT COUNT(*) FROM test_descriptions_cleaned')
        count = cursor.fetchone()[0]
        logger.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö: {count}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        cursor.execute('SELECT * FROM test_descriptions_cleaned LIMIT 1')
        sample = cursor.fetchone()
        logger.info(f"–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å—É —Ç–µ—Å—Ç—É: {sample}")
        
        # –¢–µ–ø–µ—Ä –∑–∞–ø–∏—Ç –¥–ª—è –º–µ–Ω—é
        cursor.execute('SELECT test_code, name, use_case FROM test_descriptions_cleaned ORDER BY name')
        tests = cursor.fetchall()
        
        conn.close()
        
        if not tests:
            # –Ø–∫—â–æ —Ç–µ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å
            logger.warning("–¢–µ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            
            # –î–æ–¥–∞—î–º–æ –¥–µ–º–æ-—Ç–µ—Å—Ç, —è–∫—â–æ —Ç–µ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
            cursor.execute('SELECT test_code FROM test_descriptions_cleaned WHERE test_code = ?', ('gad7',))
            if not cursor.fetchone():
                cursor.execute('''
                INSERT INTO test_descriptions_cleaned 
                (test_code, name, developer, use_case, description, image_filename) 
                VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    'gad7', 
                    'GAD-7 –¢–µ—Å—Ç –Ω–∞ —Ç—Ä–∏–≤–æ–∂–Ω—ñ—Å—Ç—å', 
                    'Spitzer et al.', 
                    '–°–∫—Ä–∏–Ω—ñ–Ω–≥ –≥–µ–Ω–µ—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ç—Ä–∏–≤–æ–∂–Ω–æ–≥–æ —Ä–æ–∑–ª–∞–¥—É', 
                    '–¶–µ–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ü—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å —Ç—Ä–∏–≤–æ–∂–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 —Ç–∏–∂–Ω—ñ.', 
                    'gad7.jpg'
                ))
                conn.commit()
                logger.info("–î–æ–¥–∞–Ω–æ –¥–µ–º–æ-—Ç–µ—Å—Ç GAD-7")
            
            conn.close()
            
            await message.answer(
                "üê± –ù–∞—Ä–∞–∑—ñ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ç–µ—Å—Ç–∏. –î–æ–¥–∞–Ω–æ –¥–µ–º–æ-—Ç–µ—Å—Ç GAD-7. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫."
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–µ—Å—Ç—É
        keyboard = []
        for test_code, name, description in tests:
            if description:
                short_desc = description[:30] + "..." if len(description) > 30 else description
                keyboard.append([InlineKeyboardButton(text=f"{name} ‚Äî {short_desc}", callback_data=f"test_{test_code}")])
            else:
                keyboard.append([InlineKeyboardButton(text=f"{name}", callback_data=f"test_{test_code}")])
        
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            "üß™ –û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏:",
            reply_markup=reply_markup
        )
        
        await state.set_state(TestStates.test_menu)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤: {e}")
        await message.answer(
            "üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

async def test_info(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()

        if callback.data == "back_to_main":
            await callback.message.delete()
            return await show_main_menu(callback.message, state)

        test_code = callback.data.replace("test_", "")
        name, developer, use_case, image_filename = get_test_info(test_code)

        if not name:
            await callback.message.answer("üê± –í–∏–±–∞—á, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü–µ–π —Ç–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return

        await state.update_data(test_code=test_code)

        # ‚úÖ –†–æ–∑–º—ñ—Ç–∫–∞ –¥–ª—è –æ–ø–∏—Å—É
        caption = (
            f"{bold_v2(name)}\n\n"
            f"{italic_v2('–†–æ–∑—Ä–æ–±–Ω–∏–∫(–∏)')}: {escape_md_v2(developer)}\n"
            f"{italic_v2('–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è')}: {escape_md_v2(use_case)}\n\n"
            "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç ‚¨á"
        )

        # ‚úÖ –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        keyboard = [
            [InlineKeyboardButton(text="üß™ –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"start_test_{test_code}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤", callback_data="back_to_tests")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ (—è–∫—â–æ —î)
        base_dir = os.path.dirname(os.path.abspath(__file__))
        image_path = os.path.join(base_dir, "..", "images", image_filename) if image_filename else None

        if image_filename and os.path.exists(image_path):
            logger.info(f"üì∏ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ: {image_path}")
            photo = FSInputFile(image_path)

            await callback.message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode="MarkdownV2"
            )
        else:
            if image_filename:
                logger.warning(f"‚ö†Ô∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {image_path}")

            await callback.message.answer(
                text=caption,
                reply_markup=reply_markup,
                parse_mode="MarkdownV2"
            )

        await callback.message.delete()

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ—Å—Ç: {e}")
        try:
            await callback.message.answer("üêæ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
        except Exception as inner_error:
            logger.error(f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ fallback –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {inner_error}")

async def back_to_tests(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await callback.message.delete()
        except:
            pass
        
        
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤ –Ω–∞–ø—Ä—è–º—É
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ó–∞–ø–∏—Ç –¥–ª—è –º–µ–Ω—é
        cursor.execute('SELECT test_code, name, use_case FROM test_descriptions_cleaned ORDER BY name')
        tests = cursor.fetchall()
        
        conn.close()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–µ—Å—Ç—É
        keyboard = []
        for test_code, name, description in tests:
            if description:
                short_desc = description[:30] + "..." if len(description) > 30 else description
                keyboard.append([InlineKeyboardButton(text=f"{name} ‚Äî {short_desc}", callback_data=f"test_{test_code}")])
            else:
                keyboard.append([InlineKeyboardButton(text=f"{name}", callback_data=f"test_{test_code}")])
        
        keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç—ñ–≤
        await callback.message.answer(
            text="üß™ –û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏:",
            reply_markup=reply_markup
        )
        
        await state.set_state(TestStates.test_menu)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤: {e}")
        logger.error(traceback.format_exc())
        
        try:
            await callback.message.answer(
                text="üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É."
            )
        except:
            pass

async def start_test(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()

        test_code = callback.data.replace("start_test_", "")
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É: {test_code}")

        questions, interpretations = get_test_questions(test_code)

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–∏—Ç–∞–Ω—å: {len(questions)}, —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ–π: {len(interpretations)}")

        if not questions:
            await callback.message.answer("üê± –í–∏–±–∞—á—Ç–µ, –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ question_id
        unique_ids = []
        seen = set()
        for row in questions:
            qid = row[0]
            if qid not in seen:
                unique_ids.append(qid)
                seen.add(qid)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É
        await state.update_data(
            test_code=test_code,
            questions=questions,
            question_ids=unique_ids,
            current_question=0,
            answers=[],
            scores=[],
            sections=[],
            interpretations=interpretations
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        update_user_stats(callback.from_user.id, test_code=test_code, started=True)

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.delete()

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
        return await show_question(callback.message, state)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É: {e}")
        import traceback
        logger.error(traceback.format_exc())

        try:
            await callback.message.answer(
                "üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
        except:
            pass

async def show_question(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        if not user_data or "questions" not in user_data or "question_ids" not in user_data:
            logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç–µ—Å—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ")
            await message.answer(
                "üê± –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç —Å–ø–æ—á–∞—Ç–∫—É."
            )
            return

        all_rows = user_data["questions"]
        question_ids = user_data["question_ids"]
        current_index = user_data.get("current_question", 0)

        if current_index >= len(question_ids):
            return await show_result(message, state)

        current_qid = question_ids[current_index]
        current_block = [row for row in all_rows if row[0] == current_qid]

        if not current_block:
            logger.warning(f"–ù–µ–º–∞ –ø–∏—Ç–∞–Ω—å –∑ ID {current_qid}")
            return await show_result(message, state)

        question_text = current_block[0][1]
        section = current_block[0][4]  # section –º–æ–∂–µ –±—É—Ç–∏ None

        keyboard = []
        for row in current_block:
            answer_text = row[2]
            score = row[3]
            try:
                score_float = float(score)
            except:
                score_float = 0.0

            callback_data = f"answer_{current_index}_{score_float}"
            if section:
                callback_data += f"_{section}"

            keyboard.append([InlineKeyboardButton(text=answer_text, callback_data=callback_data)])

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            text=f"‚ùì {question_text}",
            reply_markup=reply_markup
        )

        await state.set_state(TestStates.test_in_progress)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_question: {e}")
        await message.answer(
            "üòø –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )

async def process_answer(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        callback_data = callback.data.split('_')
        if len(callback_data) >= 3:
            question_idx = int(callback_data[1])
            score = float(callback_data[2])
            section = callback_data[3] if len(callback_data) > 3 else None
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
            user_data = await state.get_data()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            if "answers" not in user_data or "scores" not in user_data:
                user_data["answers"] = []
                user_data["scores"] = []
                user_data["sections"] = []
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –∫–Ω–æ–ø–∫–∏
            answer_text = ""
            for row in callback.message.reply_markup.inline_keyboard:
                for button in row:
                    if button.callback_data == callback.data:
                        answer_text = button.text
                        break
            
            user_data["answers"].append(answer_text)
            user_data["scores"].append(score)
            if section:
                if "sections" not in user_data:
                    user_data["sections"] = []
                user_data["sections"].append(section)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
            user_data["current_question"] += 1
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
            await state.update_data(**user_data)
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback.message.delete()
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return await show_question(callback.message, state)
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
        
        try:
            await callback.message.answer(
                "üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É."
            )
        except:
            pass

async def show_result(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        if not user_data or "test_code" not in user_data or "scores" not in user_data:
            logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–∫–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
            await message.answer(
                "üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É."
            )
            return

        test_code = user_data["test_code"]
        scores = user_data["scores"]
        sections = user_data.get("sections") or None

        # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result = process_test_result(test_code, scores, sections)
        total_score = sum(scores)

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
        await state.update_data(
            test_name=get_test_info(test_code)[0] if get_test_info(test_code) else "–¢–µ—Å—Ç"
        )

        # –ù–∞–∑–≤–∞ —Ç–µ—Å—Ç—É
        test_info = get_test_info(test_code)
        name = test_info[0] if test_info and len(test_info) > 0 else "–¢–µ—Å—Ç"
        
        result_text = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É {name}*\n\n"

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        short_result = ""
        for section, score, interpretation in result:
            score = round(score, 1)
            if section:
                result_text += f"*{section.capitalize()}*: {score} –±–∞–ª—ñ–≤\n"
                short_result += f"{section.capitalize()}: {score} –±–∞–ª—ñ–≤, "
            else:
                result_text += f"*–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª*: {score}\n"
                short_result = f"{score} –±–∞–ª—ñ–≤"
            result_text += f"_{interpretation}_\n\n"
            
        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∫–æ–º—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
        if short_result.endswith(", "):
            short_result = short_result[:-2]

        # –§—Ä–∞–∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        result_text += f"üê± {get_random_supportive_phrase()}\n\n"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ "–≤–∏—Å–æ–∫–∏–π –±–∞–ª"
        is_high_score = (
            (test_code == "gad7" and total_score > 10)
            or (test_code == "phq9" and total_score > 10)
            or (test_code == "pcl5" and total_score > 33)
            or (test_code.lower() == "aq" and total_score > 32)
            or (test_code.lower() == "bdi-ii" and total_score > 20)
            or (test_code.lower() == "stai" and total_score > 40)
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        update_user_stats(message.from_user.id, completed=True)

        # –ö–Ω–æ–ø–∫–∏
        keyboard = []
        
        # PDF-–∑–≤—ñ—Ç
        keyboard.append([InlineKeyboardButton(text="üìÑ –ï–∫—Å–ø–æ—Ä—Ç —É PDF –¥–ª—è –ª—ñ–∫–∞—Ä—è", callback_data="pdf_report")])
        # –®–Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è
        keyboard.append([InlineKeyboardButton(text="ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –®–Ü", callback_data="ask_ai")])

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è (–±–µ–∑ URL)
        share_text = f"–ü—Ä–∏–≤—ñ—Ç! –Ø –ø—Ä–æ–π—à–æ–≤ —Ç–µ—Å—Ç {name} —É @Neyrovidminni_kotyki_bot.\n–ú—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {short_result}.\n–•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π? –ü–µ—Ä–µ—Ö–æ–¥—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:"
        bot_link = f"https://t.me/Neyrovidminni_kotyki_bot?start=test_{test_code}"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        full_share_text = f"{share_text}\n{bot_link}"
        await state.update_data(share_text=full_share_text)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è
        keyboard.append([InlineKeyboardButton(text="ü§ù –ü–æ—Ä–∞–¥–∏—Ç–∏ —Ç–µ—Å—Ç –¥—Ä—É–≥—É", callback_data="share_test_text")])
        
        # –î–æ–Ω–∞—Ç
        keyboard.append([InlineKeyboardButton(text="üí∏ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç", callback_data="donate_5")])
        
        # –ù–æ–≤—ñ —Ç–µ—Å—Ç–∏
        keyboard.append([InlineKeyboardButton(text="üß™ –Ü–Ω—à—ñ —Ç–µ—Å—Ç–∏", callback_data="back_to_tests")])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            text=result_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

        await state.set_state(TestStates.test_menu)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç—É: {e}")
        import traceback
        logger.error(traceback.format_exc())
        try:
            await message.answer(
                "üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É."
            )
        except:
            pass

async def share_test_text(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        user_data = await state.get_data()
        share_text = user_data.get("share_text", "")
        if not share_text:
            # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π
            share_text = "–ü—Ä–∏–≤—ñ—Ç! –°–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ —Ç–µ—Å—Ç–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤—ñ–¥ –∫–æ—Ç–∏–∫—ñ–≤ —É @Neyrovidminni_kotyki_bot"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(text="üì± –ü–æ—à–∏—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ Telegram", switch_inline_query=share_text)],
            [InlineKeyboardButton(text="üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="copy_share_text")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_results")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.answer(
            "üê± –Ø–∫ –±–∏ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ—Å—Ç–æ–º –∑ –¥—Ä—É–≥–æ–º?",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º–µ–Ω—é –ø–æ—à–∏—Ä–µ–Ω–Ω—è: {e}")
        await callback.message.answer("üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def copy_share_text(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer("–¢–µ–∫—Å—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É")
        
        user_data = await state.get_data()
        share_text = user_data.get("share_text", "")
        test_code = user_data.get("test_code", "")
        
        if share_text:
            await callback.message.answer(
                f"üê± –û—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:\n\n{share_text}\n\n"
                f"–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü–µ–π —Ç–µ–∫—Å—Ç —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ –¥—Ä—É–≥—É."
            )
        else:
            await callback.message.answer("üê± –ù–∞ –∂–∞–ª—å, —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É: {e}")
        await callback.message.answer("üê± –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É.")

async def back_to_results(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.delete()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {e}")